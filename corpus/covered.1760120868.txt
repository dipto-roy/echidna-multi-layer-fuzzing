/home/dip-roy/echidna_dev/echidna_1/echidna/contact/reentrancyvault.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.20;
  3 |     | 
  4 | *r  | contract ReentrancyVault {
  5 | *   |     mapping(address => uint256) public balances;
  6 |     |     bool private locked;
  7 |     | 
  8 | *   |     function deposit() external payable {
  9 | *   |         balances[msg.sender] += msg.value;
 10 |     |     }
 11 |     | 
 12 | *r  |     function withdraw(uint256 amount) external {
 13 | *r  |         require(balances[msg.sender] >= amount, "insufficient");
 14 | *   |         require(!locked, "no reentrancy");
 15 | *   |         locked = true;
 16 | *   |         (bool ok,) = msg.sender.call{value: amount}("");
 17 | *   |         require(ok, "transfer fail");
 18 | *   |         balances[msg.sender] -= amount;
 19 | *   |         locked = false;
 20 |     |     }
 21 |     | 
 22 |     |     // Echidna: balance never goes negative and lock must be false after calls
 23 |     |     function echidna_lock_is_clear() public view returns (bool) {
 24 |     |         return locked == false;
 25 |     |     }
 26 |     | }
 27 |     | 

